'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _globalConfig = require('../../globalConfig.json');

var _globalConfig2 = _interopRequireDefault(_globalConfig);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

var _listFilter = require('./listFilter');

var _listFilter2 = _interopRequireDefault(_listFilter);

var _maskModal = require('./maskModal');

var _maskModal2 = _interopRequireDefault(_maskModal);

var _detail = require('./detail');

var _detail2 = _interopRequireDefault(_detail);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var InfoSearch = function (_React$Component) {
    _inherits(InfoSearch, _React$Component);

    function InfoSearch(props) {
        _classCallCheck(this, InfoSearch);

        var _this2 = _possibleConstructorReturn(this, (InfoSearch.__proto__ || Object.getPrototypeOf(InfoSearch)).call(this, props));

        _this2.state = {};

        _this2._bind.apply(_this2, ['onInfoItemClick', 'getListData', 'filterCancel', 'closeDetailModal', 'onInfoSelectDone']);
        return _this2;
    }

    _createClass(InfoSearch, [{
        key: '_bind',
        value: function _bind() {
            var _this3 = this;

            for (var _len = arguments.length, methods = Array(_len), _key = 0; _key < _len; _key++) {
                methods[_key] = arguments[_key];
            }

            methods.forEach(function (method) {
                return _this3[method] = _this3[method].bind(_this3);
            });
        }
    }, {
        key: 'getListData',
        value: function getListData(option) {
            var _this4 = this;

            var url = _globalConfig2.default.baseUrl + '/api/search';

            _jquery2.default.getJSON(url, option, function (json, textStatus) {
                if (0 != json.errCode) {
                    return;
                }

                var list = json.data.map(function (item, i) {
                    item.ctime = _util2.default.dateStrFromUnix(item.createTime || item.publishTime);

                    return item;
                });

                _this4.setState({
                    list: list,
                    total: json.total
                });
            });
        }
    }, {
        key: 'onInfoItemClick',
        value: function onInfoItemClick(i) {
            var _this5 = this;

            var info = this.state.list[i || 0];

            this.setState({ infoId: info.id, info: info }, function () {
                _this5.refs.MaskModal.open();
            });
        }

        /*onPageChange (page, sizePerPage) {
            var opt = Object.assign(this.option, {page});
            this.getListData(opt);
        }*/

    }, {
        key: 'filterCancel',
        value: function filterCancel() {
            this.props.closeSearchModal && this.props.closeSearchModal();
        }
    }, {
        key: 'closeDetailModal',
        value: function closeDetailModal() {
            this.setState({ infoId: undefined });
            // this.refs.MaskModal.close();
        }
    }, {
        key: 'onInfoSelectDone',
        value: function onInfoSelectDone() {
            this.props.onInfoSelectDone(this.state.infoId, this.state.info);

            this.setState({ infoId: undefined });
            this.props.closeSearchModal();
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {}
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {}
    }, {
        key: 'render',
        value: function render() {
            var ul,
                list = this.state.list,
                _this = this;

            if (!list) {
                ul = _react2.default.createElement(
                    'h1',
                    { className: 'filter-hint' },
                    '请输入过滤条件查询相关资讯'
                );
            } else if (0 == list.length) {
                ul = _react2.default.createElement(
                    'h1',
                    { className: 'filter-hint' },
                    '没有查询符合条件的资讯，请重新设定'
                );
            } else {
                ul = _react2.default.createElement(
                    'ul',
                    { className: 'info-list' },
                    list.map(function (item, i) {
                        var author = item.authors && item.authors[0];

                        return _react2.default.createElement(
                            'li',
                            { key: item.id, onClick: _this.onInfoItemClick.bind(_this, i) },
                            _react2.default.createElement(
                                'h4',
                                { className: 'title' },
                                item.title
                            ),
                            _react2.default.createElement(
                                'p',
                                { className: 'info-meta' },
                                '新闻来源：',
                                item.media,
                                '    作者：',
                                author ? author.name : '匿名',
                                '    创建时间：',
                                item.ctime
                            )
                        );
                    })
                );
            }

            var modalInfo = {
                className: 'info-detail-modal',
                btns: [{ name: '取消', click: this.closeDetailModal }, { name: '确定', bsStyle: 'primary', click: this.onInfoSelectDone }]
            };

            return _react2.default.createElement(
                'div',
                { className: 'info-search-body' },
                _react2.default.createElement(_listFilter2.default, { pageName: 'infoSearch', getTableData: this.getListData, filterCancel: this.filterCancel, autoGet: true }),
                ul,
                this.state.infoId ? _react2.default.createElement(
                    _maskModal2.default,
                    { ref: 'MaskModal', showModal: true, modalInfo: modalInfo },
                    _react2.default.createElement(_detail2.default, { infoId: this.state.infoId })
                ) : null
            );
        }
    }]);

    return InfoSearch;
}(_react2.default.Component);

;

exports.default = InfoSearch;